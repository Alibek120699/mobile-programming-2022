{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/aleke/kbtu/mobile-programming/music-player/App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { AppLoading } from 'expo';\nimport { Asset } from 'expo-asset';\nimport * as Font from 'expo-font';\nimport React, { useState } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Ionicons } from '@expo/vector-icons';\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport PlayerReducer from \"./reducer/PlayerReducer\";\nimport AppNavigator from \"./navigation/AppNavigator\";\nvar store = createStore(PlayerReducer);\nexport default function App(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoadingComplete = _useState2[0],\n      setLoadingComplete = _useState2[1];\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return React.createElement(Provider, {\n      store: store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, React.createElement(AppLoading, {\n      startAsync: loadResourcesAsync,\n      onError: handleLoadingError,\n      onFinish: function onFinish() {\n        return handleFinishLoading(setLoadingComplete);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    return React.createElement(Provider, {\n      store: store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    }, React.createElement(View, {\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, Platform.OS === 'ios' && React.createElement(StatusBar, {\n      barStyle: \"default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 37\n      }\n    }), React.createElement(AppNavigator, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }\n    })));\n  }\n}\n\nfunction loadResourcesAsync() {\n  return _regeneratorRuntime.async(function loadResourcesAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Promise.all([Asset.loadAsync([require(\"./assets/images/robot-dev.png\"), require(\"./assets/images/robot-prod.png\")]), Font.loadAsync(_objectSpread(_objectSpread({}, Ionicons.font), {}, {\n            'space-mono': require(\"./assets/fonts/SpaceMono-Regular.ttf\")\n          }))]));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction handleLoadingError(error) {\n  console.warn(error);\n}\n\nfunction handleFinishLoading(setLoadingComplete) {\n  setLoadingComplete(true);\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  }\n});","map":{"version":3,"sources":["/Users/aleke/kbtu/mobile-programming/music-player/App.js"],"names":["AppLoading","Asset","Font","React","useState","Ionicons","Provider","createStore","PlayerReducer","AppNavigator","store","App","props","isLoadingComplete","setLoadingComplete","skipLoadingScreen","loadResourcesAsync","handleLoadingError","handleFinishLoading","styles","container","Platform","OS","Promise","all","loadAsync","require","font","error","console","warn","StyleSheet","create","flex","backgroundColor"],"mappings":";;;;;;;;;AAAA,SAASA,UAAT,QAA2B,MAA3B;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;AAEA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,OAAOC,aAAP;AAGA,OAAOC,YAAP;AAEA,IAAMC,KAAK,GAAGH,WAAW,CAACC,aAAD,CAAzB;AAEA,eAAe,SAASG,GAAT,CAAaC,KAAb,EAAoB;AACjC,kBAAgDR,QAAQ,CAAC,KAAD,CAAxD;AAAA;AAAA,MAAOS,iBAAP;AAAA,MAA0BC,kBAA1B;;AAEA,MAAI,CAACD,iBAAD,IAAsB,CAACD,KAAK,CAACG,iBAAjC,EAAoD;AAClD,WACE,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEL,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AACE,MAAA,UAAU,EAAEM,kBADd;AAEE,MAAA,OAAO,EAAEC,kBAFX;AAGE,MAAA,QAAQ,EAAE;AAAA,eAAMC,mBAAmB,CAACJ,kBAAD,CAAzB;AAAA,OAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AASD,GAVD,MAUO;AACL,WACE,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEJ,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAES,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,IAAyB,oBAAC,SAAD;AAAW,MAAA,QAAQ,EAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD5B,EAEE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,CADF;AAQD;AACF;;AAED,SAAeN,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACQO,OAAO,CAACC,GAAR,CAAY,CAChBvB,KAAK,CAACwB,SAAN,CAAgB,CACdC,OAAO,iCADO,EAEdA,OAAO,kCAFO,CAAhB,CADgB,EAKhBxB,IAAI,CAACuB,SAAL,iCAEKpB,QAAQ,CAACsB,IAFd;AAKE,0BAAcD,OAAO;AALvB,aALgB,CAAZ,CADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAST,kBAAT,CAA4BW,KAA5B,EAAmC;AAGjCC,EAAAA,OAAO,CAACC,IAAR,CAAaF,KAAb;AACD;;AAED,SAASV,mBAAT,CAA6BJ,kBAA7B,EAAiD;AAC/CA,EAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAED,IAAMK,MAAM,GAAGY,UAAU,CAACC,MAAX,CAAkB;AAC/BZ,EAAAA,SAAS,EAAE;AACTa,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE;AAFR;AADoB,CAAlB,CAAf","sourcesContent":["import { AppLoading } from 'expo';\nimport { Asset } from 'expo-asset';\nimport * as Font from 'expo-font';\nimport React, { useState } from 'react';\nimport { Platform, StatusBar, StyleSheet, View } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport PlayerReducer from \"./reducer/PlayerReducer\";\n\n\nimport AppNavigator from './navigation/AppNavigator';\n\nconst store = createStore(PlayerReducer);\n\nexport default function App(props) {\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return (\n      <Provider store={store}>\n        <AppLoading\n          startAsync={loadResourcesAsync}\n          onError={handleLoadingError}\n          onFinish={() => handleFinishLoading(setLoadingComplete)}\n        />\n      </Provider>\n    );\n  } else {\n    return (\n      <Provider store={store}>\n        <View style={styles.container}>\n          {Platform.OS === 'ios' && <StatusBar barStyle=\"default\" />}\n          <AppNavigator />\n        </View>\n      </Provider>\n    );\n  }\n}\n\nasync function loadResourcesAsync() {\n  await Promise.all([\n    Asset.loadAsync([\n      require('./assets/images/robot-dev.png'),\n      require('./assets/images/robot-prod.png'),\n    ]),\n    Font.loadAsync({\n      // This is the font that we are using for our tab bar\n      ...Ionicons.font,\n      // We include SpaceMono because we use it in HomeScreen.js. Feel free to\n      // remove this if you are not using it in your app\n      'space-mono': require('./assets/fonts/SpaceMono-Regular.ttf'),\n    }),\n  ]);\n}\n\nfunction handleLoadingError(error) {\n  // In this case, you might want to report the error to your error reporting\n  // service, for example Sentry\n  console.warn(error);\n}\n\nfunction handleFinishLoading(setLoadingComplete) {\n  setLoadingComplete(true);\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}